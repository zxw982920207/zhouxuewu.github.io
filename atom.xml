<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>successli的个人博客</title>
  <icon>https://www.gravatar.com/avatar/d554f58d80d7a73feabf4a7fa1774974</icon>
  <subtitle>记录成长，分享点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://successli.cn/"/>
  <updated>2018-07-21T07:33:59.989Z</updated>
  <id>http://successli.cn/</id>
  
  <author>
    <name>successli</name>
    <email>shengly0619@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://successli.cn/2018/07/21/hello-world/"/>
    <id>http://successli.cn/2018/07/21/hello-world/</id>
    <published>2018-07-21T07:33:59.988Z</published>
    <updated>2018-07-21T07:33:59.989Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ethereum私有链的搭建和部分源码编译问题的汇总</title>
    <link href="http://successli.cn/2018/04/13/Ethereum%E7%A7%81%E6%9C%89%E9%93%BE%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://successli.cn/2018/04/13/Ethereum私有链的搭建及部分源码编译问题汇总/</id>
    <published>2018-04-12T16:00:00.000Z</published>
    <updated>2018-07-21T15:08:01.266Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/ethereum.jpeg" alt="ethereum" width="750px" height="300px"></p><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.安装curl,git</p><p>2.安装go配置环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># go config</span><br><span class="line"><span class="keyword">export</span> GOPATH=$HOME/go</span><br><span class="line"><span class="keyword">export</span> GOBIN=$HOME/go/bin</span><br><span class="line"><span class="keyword">export</span> GOROOT=<span class="regexp">/usr/</span>local/go</span><br><span class="line"><span class="keyword">export</span> PATH=<span class="regexp">/usr/</span>local/go/bin:$GOPATH/bin:$PATH</span><br></pre></td></tr></table></figure><p>3.安装nodejs+npm</p><h3 id="1-Ethereum环境安装"><a href="#1-Ethereum环境安装" class="headerlink" title="1.Ethereum环境安装"></a>1.Ethereum环境安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class="line">sudo add-apt-repository -y ppa:ethereum/ethereum-dev</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure><p>此时,安装的以太坊客户端版本号是最新稳定版.<br>对于1.5.9-stable版本的geth,我们需要通过编译源码获得.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/ethereum/go-ethereum</span></span><br><span class="line">cd go-ethereum</span><br><span class="line">git checkout v1.5.9 #切换版本</span><br><span class="line">make geth #编译</span><br></pre></td></tr></table></figure><h3 id="2-solc源码编译安装"><a href="#2-solc源码编译安装" class="headerlink" title="2.solc源码编译安装"></a>2.solc源码编译安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ethereum/ethereum</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install solc</span><br></pre></td></tr></table></figure><p>此时,安装的solc也是最新版本.<br>旧版本的solc需要通过编译源码的方式获得.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/ethereum/solidity.git</span></span><br><span class="line">cd solidity</span><br><span class="line">git checkout v0.4.10 #切换版本</span><br><span class="line">sudo ./scripts/install_deps.sh #安装依赖</span><br><span class="line">sudo ./scripts/build.sh #源码编译</span><br></pre></td></tr></table></figure><blockquote><p>Ps:在Ubuntu16.04本地环境下,源码编译成功.但在Ubuntu16.04服务器环境下,编译失败,寻因未果.<br>报错信息如下:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Configuring incomplete, errors occurred!</span><br><span class="line">See also <span class="string">"/home/ubuntu/solidity/build/CMakeFiles/CMakeOutput.log"</span>.</span><br><span class="line">See also <span class="string">"/home/ubuntu/solidity/build/CMakeFiles/CMakeError.log"</span>.</span><br><span class="line">Failed to build</span><br></pre></td></tr></table></figure><h3 id="3-启动以太坊客户端"><a href="#3-启动以太坊客户端" class="headerlink" title="3.启动以太坊客户端"></a>3.启动以太坊客户端</h3><p>1.创建账户</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geth account <span class="keyword">new</span></span><br><span class="line">geth account <span class="keyword">new</span></span><br><span class="line">geth account new #连续创建三个账户,密码123456</span><br></pre></td></tr></table></figure><p>2.生成创世区块</p><ul><li>编辑创世区块配置文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    # ~/test-genesis.json</span><br><span class="line">    <span class="string">"nonce"</span>: <span class="string">"0x0000000000000042"</span>,</span><br><span class="line">    <span class="string">"difficulty"</span>: <span class="string">"0x1"</span>,</span><br><span class="line">    <span class="string">"alloc"</span>: &#123;</span><br><span class="line">        "246d779602e185a53240a6cc5b01f74a17bd5deb": &#123; #实际账户地址,需自定义</span><br><span class="line">            "balance": "20000009800000000000000000000" #每个账户余额初始值</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"c0a07133e5dc82ab923bbe9506f3ea4479d2b797"</span>: &#123;</span><br><span class="line">            <span class="string">"balance"</span>: <span class="string">"20000009800000000000000000000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"b62b9d792e9825072f3d416569cc07e43a20c84f"</span>: &#123;</span><br><span class="line">            <span class="string">"balance"</span>: <span class="string">"20000009800000000000000000000"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"config"</span>: &#123;</span><br><span class="line">        <span class="string">"chainId"</span>: <span class="number">15</span>,</span><br><span class="line">        <span class="string">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"eip158Block"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"mixhash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>, <span class="string">"coinbase"</span>: <span class="string">"0x0000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="string">"timestamp"</span>: <span class="string">"0x00"</span>,</span><br><span class="line">    <span class="string">"parentHash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="string">"extraData"</span>: <span class="string">"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"</span>,</span><br><span class="line">    <span class="string">"gasLimit"</span>: <span class="string">"0x2fefd8"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生成创世区块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir <span class="string">"~/.ethereum"</span> init blockchain/test-genesis.json</span><br></pre></td></tr></table></figure><p>3.配置以太坊客户端启动脚本</p><ul><li>保存账号密码到password文件,用于解锁账户</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 配置密码,每一个账户对应一行密码</span><br><span class="line"># ~/.ethereum/password</span><br><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>在以太坊中,出于安全机制,以太坊每隔一段时间就会锁定账户<br>所以我们可以有两种方式解锁以太坊账户<br>1.在启动脚本中读取密码文件解锁<br>2.使用以下js交互命令</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web3.eth.personal.unlockAccount(fromAddress, passWord, 10000) #解锁持续时间10000ms</span><br></pre></td></tr></table></figure><ul><li>编写启动脚本</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ~/.ethereum/private_blockchain.sh</span><br><span class="line">geth --rpc --rpcaddr="0.0.0.0" --rpccorsdomain="*" --unlock '0,1,2' #解锁三个账户</span><br><span class="line"> --password ~/.ethereum/password  #保存密码明文的文件</span><br><span class="line"> --nodiscover --maxpeers <span class="string">'5'</span> --networkid <span class="string">'1234574'</span> --datadir <span class="string">'~/.ethereum'</span> <span class="built_in">console</span></span><br></pre></td></tr></table></figure><ul><li>启动以太坊客户端,进入JS交互式命令行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash private_blockchain.sh</span><br></pre></td></tr></table></figure><h3 id="4-智能合约的编译与部署"><a href="#4-智能合约的编译与部署" class="headerlink" title="4.智能合约的编译与部署"></a>4.智能合约的编译与部署</h3><blockquote><p>部署合约前的准备工作:<br>通过<a href="https://remix.ethereum.org/" target="_blank" rel="noopener">Remix</a>或<a href="http://www.hyperchain.cn/" target="_blank" rel="noopener">趣链开发者平台</a>编译智能合约获得ABI和BIN.<br>account的balance大于0且已解锁.</p></blockquote><ul><li>定义bank_abi</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bank_abi=[&#123;constant:false,inputs:[&#123;name:'a',type:'uint256'&#125;],name:'multiply',outputs:[&#123;name:'d',type:'uint256'&#125;],type:'function'&#125;] #此处为实例,实际abi需自定义</span><br></pre></td></tr></table></figure><ul><li>创建合约</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bankContract = web3.eth.contract(bank_abi)</span><br></pre></td></tr></table></figure><ul><li>解锁账户</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.unlockAccount(eth.coinbase, '123456', 10000) #eth.coinbase是指定矿工的地址,默认是eth.accounts[0]</span><br></pre></td></tr></table></figure><ul><li>部署合约</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bank=bankContract.new(&#123;from:eth.coinbase,data:"0x60606040523415600b57fe5b5b60788061001a6000396000f300606060405263ffffffff60e060020a600035041663c6888fa181146020575bfe5b3415602757fe5b60306004356042565b60408051918252519081900360200190f35b600781025b9190505600a165627a7a7230582007a6259ba3d57941abda2e261e9a67958a3eda78b779d9dd8d42518791fddd590029"&#125;) #此处的二进制是智能合约编译后生成的BIN,需自定义</span><br></pre></td></tr></table></figure><ul><li>挖矿上链<blockquote><p>部署合约的过程实际也是由创建合约的账户发送的一笔交易（即eth.coinbase账户）。需要挖矿进行确认。</p></blockquote></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">miner.start(1) #启动一个线程(貌似)</span><br><span class="line">miner.stop() #需手动停止挖矿</span><br></pre></td></tr></table></figure><ul><li>确认上链</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.getBlocks[1] #区块编号一般是已有区块的基础上加1</span><br></pre></td></tr></table></figure><p>此时,如果usedGas参数大于0,表示挖矿成功.</p><h3 id="5-webapp与以太坊平台的交互方式"><a href="#5-webapp与以太坊平台的交互方式" class="headerlink" title="5.webapp与以太坊平台的交互方式"></a>5.webapp与以太坊平台的交互方式</h3><blockquote><p>未完待续</p></blockquote><h3 id="常用命令汇总"><a href="#常用命令汇总" class="headerlink" title="常用命令汇总"></a>常用命令汇总</h3><p>geth命令:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir "~/.ethereum" init ./test-genesis.json #以test-genesis.json脚本初始化创世区块,设置datadir</span><br><span class="line">geth account new #新建一个账户,需要输入两次密码</span><br><span class="line">geth account list #list所有的账户地址</span><br></pre></td></tr></table></figure><p>js交互命令:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eth #列出所有的账户地址,区块数以及eth命令下的函数名称</span><br><span class="line">eth.coinbase #矿工地址,一般为第一个账户地址,即eth.accounts[0]</span><br><span class="line">eth.accounts[0] #第一个账户地址</span><br><span class="line">eth.getBlocks(0) #获取第一个区块信息</span><br><span class="line">eth.getBalance(eth.accounts[0]) #获取第一个账户的余额</span><br><span class="line">eth.getTransactionRecepit(xxx) #获取部署后的合约地址,参数为合约地址所在的区块中的Transaction字段</span><br><span class="line">admin.setSloc('/usr/local/bin/solc') #指定solc编译器的地址</span><br><span class="line">txpool.status #查看交易池信息,比如等待队列中交易的数量</span><br><span class="line">miner.start(1) #开启一个线程进行挖矿操作</span><br><span class="line">miner.stop() #需要手动停止挖矿</span><br></pre></td></tr></table></figure><blockquote><p>参考资料</p><ol><li><a href="http://www.cnblogs.com/liangyue/p/6824858.html" target="_blank" rel="noopener">ubuntu系统搭建以太坊私有链</a></li><li><a href="https://www.cnblogs.com/lxcmyf/p/8489273.html#version=soljson-latest.js" target="_blank" rel="noopener">以太坊合约简单部署和使用</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/ethereum.jpeg&quot; alt=&quot;ethereum&quot; width=&quot;750px&quot; height=&quot;300px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="http://successli.cn/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>Ethereum以太坊的学习与实践</title>
    <link href="http://successli.cn/2018/04/06/Ethereum%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://successli.cn/2018/04/06/Ethereum以太坊的学习与实践/</id>
    <published>2018-04-05T16:00:00.000Z</published>
    <updated>2018-07-21T15:45:49.476Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/learn_eth.jpeg" alt="ethereum" width="750px" height="300px"></p><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p>区块链就是一个具有共享状态的密码性安全交易的单机(cryptographically secure transactional singleton machine with shared-state)。</p><ul><li>“密码性安全(Cryptographically secure)”是指用一个很难被解开的复杂数学机制算法来保证数字货币生产的安全性。将它想象成类似于防火墙的这种。它们使得欺骗系统近乎是一个不可能的事情（比如：构造一笔假的交易，消除一笔交易等等）。</li><li>“交易的单机(Transactional singleton machine)”是指只有一个权威的机器实例为系统中产生的交易负责任。换句话说，只有一个全球真相是大家所相信的。</li><li>“具有共享状态(With shared-state)”是指在这台机器上存储的状态是共享的，对每个人都是开放的。<blockquote><p>以太坊实现了区块链的这个范例。</p></blockquote></li></ul><h3 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h3><ul><li>定义:以太坊的目的是基于脚本、竞争币和链上元协议（on-chain meta-protocol）概念进行整合和提高，使得开发者能够创建任意的基于共识的、可扩展的、标准化的、特性完备的、易于开发的和协同的应用。</li><li>实际上,以太坊，Ethereum是一个分布式的计算机，有许多的节点，其中的每一个节点，都会执行字节码（其实就是智能合约），然后把结果存在区块链上。由于整个网络是分布式的，且应用就是一个个的状态组成，存储了状态就有了服务；所以它就能永不停机，没有一个中心化的结点（没有任何一个节点说了算，去中心化的），任何第三方不能干预。</li></ul><blockquote><p>一些概念</p></blockquote><ol><li>以太坊的本质就是一个基于交易的<strong>状态机</strong>(transaction-based state machine)。在计算机科学中，一个状态机是指可以读取一系列的输入，然后根据这些输入，会转换成一个新的状态出来的东西。</li><li>根据以太坊的状态机，我们从<strong>创世纪状态</strong>(genesis state)开始。这差不多类似于一片空白的石板，在网络中还没有任何交易的产生状态。当交易被执行后，这个创世纪状态就会转变成最终状态。在任何时刻，这个最终状态都代表着以太坊当前的状态。</li><li>以太坊的状态有百万个交易。这些交易都被“组团”放到一个<strong>区块</strong>中。一个区块包含了一系列的交易，每个区块都与它的前一个区块链接起来。</li><li>为了让一个状态转换成下一个状态，交易必须是有效的。为了让一个交易被认为是有效的，它必须要经过一个验证过程，此过程也就是<strong>挖矿</strong>。挖矿就是一组节点（即电脑）用它们的计算资源来创建一个包含有效交易的区块出来。</li><li>任何在网络上宣称自己是矿工的节点都可以尝试创建和验证区块。世界各地的很多矿工都在同一时间创建和验证区块。每个矿工在提交一个区块到区块链上的时候都会提供一个数学机制的“证明”，这个证明就像一个保证：如果这个证明存在，那么这个区块一定是有效的。为了让一个区块添加到主链上，一个矿工必须要比其他矿工更快的提供出这个“证明”。通过矿工提供的一个数学机制的“证明”来证实每个区块的过程称之为<strong>工作量证明</strong>(proof of work)。</li></ol><blockquote><p>深入地了解一下以太坊系统主要组成部分：</p><ul><li>账户(accounts)</li><li>状态(state)</li><li>损耗和费用(gas and fees)</li><li>交易(transactions)</li><li>区块(blocks)</li><li>交易执行(transaction execution)</li><li>挖矿(mining)</li><li>工作量证明(proof of work)</li></ul></blockquote><h4 id="以太坊账户"><a href="#以太坊账户" class="headerlink" title="以太坊账户"></a>以太坊账户</h4><p>以太坊的全局“共享状态”是有很多小对象（账户）来组成的，这些账户可以通过消息传递来与对方进行交互。每个账户都有一个与之关联的状态(state)和一个20字节的地址(address)。在以太坊中一个地址是160位的标识符，用来识别账户。</p><p>以太坊有两种类型的账户：</p><ul><li>外部账户（由私钥控制的）</li><li>合约账户（由合约代码控制）。</li></ul><p><strong>两种账户都可以发起交易，后者被动发送。</strong></p><blockquote><p>外部拥有账户与合约账户的比较</p></blockquote><ul><li><p>一个外部拥有账户可以通过创建和用自己的私钥来对交易进行签名，来发送消息给另一个外部拥有账户或合约账户。在两个外部拥有账户之间传送的消息只是一个简单的价值转移。但是从外部拥有账户到合约账户的消息会激活合约账户的代码，允许它执行各种动作。（比如转移代币，写入内部存储，挖出一个新代币，执行一些运算，创建一个新的合约等等）。</p></li><li><p>不像外部拥有账户，合约账户不可以自己发起一个交易。相反，合约账户只有在接收到一个交易之后(从一个外部拥有账户或另一个合约账户处)，为了响应此交易而触发一个交易。</p></li></ul><blockquote><p>因此，在以太坊上任何的动作，总是被外部拥有账户触发的交易所发动的。</p></blockquote><p><strong>账户状态</strong></p><blockquote><p>账户状态有四个组成部分，不论账户类型是什么，都存在这四个组成部分：</p><ul><li>nonce：如果账户是一个外部拥有账户，nonce代表从此账户地址发送的交易序号。如果账户是一个合约账户，nonce代表此账户创建的合约序号</li><li>balance： 此地址拥有Wei的数量。1Ether=10^18Wei</li><li>storageRoot： Merkle Patricia树的根节点Hash值（我们后面在解释Merkle树）。Merkle树会将此账户存储内容的Hash值进行编码，默认是空值</li><li>codeHash：此账户EVM（以太坊虚拟机，后面细说）代码的hash值。对于合约账户，就是被Hash的代码并作为codeHash保存。对于外部拥有账户，codeHash域是一个空字符串的Hash值</li></ul></blockquote><p><strong>gas和费用</strong><br>在以太坊中一个比较重要的概念就是费用(fees)，由以太坊网络上的交易而产生的每一次计算，都会产生费用—没有免费的午餐。这个费用是以”gas”来支付。<br>Gas就是用来衡量在一个具体计算中要求的费用单位。gas price就是你愿意在每个gas上花费Ether的数量，以“gwei”进行衡量。“Wei”是Ether的最小单位，1Ether=10^18Wei，1gwei=1,000,000,000 Wei。<br>对每个交易，发送者设置gas limit和gas price。gas limit和gas price就代表着发送者愿意为执行交易支付的Wei的最大值。</p><h4 id="消息和交易"><a href="#消息和交易" class="headerlink" title="消息和交易"></a>消息和交易</h4><p>最基本的概念，一个交易就是指被外部拥有账户生成的加密签名的一段指令，序列化之后提交给区块链。</p><blockquote><p>有两种类型的交易：消息通信(message calls)和合约创建(contract creations)(也就是交易产生一个新的以太坊合约)。<br>不管什么类型的交易，都包含：</p></blockquote><ul><li>nonce：发送者发送交易数的计数</li><li>gasPrice：发送者愿意支付执行交易所需的每个gas的Wei数量</li><li>gasLimit：发送者愿意为执行交易支付gas数量的最大值。此值设置之后在任何计算完成之前就会被提前扣掉</li><li>to：接收者的地址。在合约创建交易中，合约账户的地址还没有存在，所以值先空着</li><li>value：从发送者转移到接收者Wei的数量。在合约创建交易中，value作为新建合约账户的开始余额</li><li>v,r,s：用于产生标识交易发送者的签名</li><li>init（只有在合约创建交易中存在）：用来初始化新合约账户的EVM代码片段。init值会执行一次，然后就会被丢弃。当init第一次执行的时候，它返回一个账户代码体，也就是永久与合约账户关联的一段代码。</li><li>data（可选域，只有在消息通信中存在）：消息通信中的输入数据(也就是参数)。例如，如果智能合约就是一个域名注册服务，那么调用合约可能就会期待输入参数：域名和IP地址</li></ul><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><p>所有的交易都被组成一个”块”。一个区块链包含了一系列这样链在一起的区块。<br>在以太坊中，一个区块包含：</p><ul><li>区块头</li><li>关于包含在此区块中交易集的信息</li><li>与当前块的ommers相关的一系列其他区块头</li></ul><blockquote><p>ommers解释</p></blockquote><p>“ommer”到底是什么？ ommer就是一个区块的父区块与当前区块父区块的父区块是相同的。让我们快速了解一下ommers是用来干嘛的，并且为什么一个区块需要为ommers包含区块头。<br>由于以太坊的构造，它的区块生产时间（大概15秒左右）比其他的区块链例如Bitcoin（大概10分钟左右）要快很多。这使得交易的处理更快。但是，更短的区块生产时间的一个缺点就是：更多的竞争区块会被矿工发现。这些竞争区块同样也被称为“孤区块”（也就是被挖出来但是不会被添加到主链上的区块）。<br>Ommers的目的就是为了帮助奖励矿工纳入这些孤区块。矿工包含的ommers必须是有效的，也就是ommers必须是往上数6代之内或更小范围内父区块的子区块。 一个孤区块在第6个子区块之后，这种陈旧的孤区块将不会再被引用（因为包含老旧的交易会使事情变得复杂一点）。<br>Ommer区块会收到比全区块少一点的奖励。不管怎样，依然存在激励来让矿工们纳入孤区块并能从中获得一些报酬。</p><blockquote><p>区块头</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getBlock(1)</span></span><br><span class="line">&#123;</span><br><span class="line">    difficulty: 131072,</span><br><span class="line">    extraData: "0xd783010509846765746887676f312e352e31856c696e7578",</span><br><span class="line">    gasLimit: 3144658,</span><br><span class="line">    gasUsed: 1910026,</span><br><span class="line">    hash: "0xc0b29bc36695a0437fbc8886bf37f845582169062bc6d62885a5fe626f7e295e",</span><br><span class="line">    logsBloom: "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",</span><br><span class="line">    miner: "0x5a1d4c5249f27ef473a6ab3b715f03313fd1f560",</span><br><span class="line">    mixHash: "0x591c1f3f5a0ded2059f1e587c160f9bf7a0d68d26d59becb30d6522877f2adfc",</span><br><span class="line">    nonce: "0x4212740f3207045d",</span><br><span class="line">    number: 1,</span><br><span class="line">    parentHash: "0x33a09ce307ed33581a1a0e2f854de4e55d6a5be246a08408c76da9dd5959869a",</span><br><span class="line">    receiptsRoot: "0x68c0e9f576c9d919b9246071b48e216bb664175e3449a41e97cdc9faa63af2be",</span><br><span class="line">    sha3Uncles: "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",</span><br><span class="line">    size: 7601,</span><br><span class="line">    stateRoot: "0x162deb8236f6a1ac694e24fb88bd9c1665c90135b6535a6281a2f6ae43b19f19",</span><br><span class="line">    timestamp: 1523541484,</span><br><span class="line">    totalDifficulty: 131073,</span><br><span class="line">    transactions: ["0x21db4aef57dab234ec12f864be40cd4e8a598262ffdb02a9e1d3b14b2a200b9a"],</span><br><span class="line">    transactionsRoot: "0x7319b6173c48ecb69021575df2b8cc508c2fe1f3645cf63ad9f07125f35d4226",</span><br><span class="line">    uncles: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parentHash：父区块头的Hash值（这也是使得区块变成区块链的原因）<br>ommerHash：当前区块ommers列表的Hash值<br>beneficiary：接收挖此区块费用的账户地址<br>stateRoot：状态树根节点的Hash值（回忆一下我们之前所说的保存在头中的状态树以及它使得轻客户端认证任何关于状态的事情都变得非常简单）<br>transactionsRoot：包含此区块所有交易的Merkle树的根节点Hash值<br>receiptsRoot：包含此区块所有交易收据的Merkle树的根节点Hash值<br>logsBloom：由日志信息组成的一个Bloom过滤器 (一种数据结构)<br>difficulty： 此区块的难度级别<br>number：当前区块的计数（创世纪块的区块序号为0，对于每个后续区块，区块序号都增加1）<br>gasLimit：每个区块的当前gas limit<br>gasUsed： 此区块中交易所用的总gas量<br>timestamp：此区块成立时的unix的时间戳<br>extraData：与此区块相关的附加数据<br>mixHash：一个Hash值，当与nonce组合时，证明此区块已经执行了足够的计算<br>nonce：一个Hash值，当与mixHash组合时，证明此区块已经执行了足够的计算</p><blockquote><p>交易收据</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getTransactionReceipt(<span class="string">"0x21db4aef57dab234ec12f864be40cd4e8a598262ffdb02a9e1d3b14b2a200b9a"</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    blockHash: "0xc0b29bc36695a0437fbc8886bf37f845582169062bc6d62885a5fe626f7e295e",</span><br><span class="line">    blockNumber: 1,</span><br><span class="line">    contractAddress: "0xc94dbcd3480d6c2c92bd303382ed3c3a3308194a",</span><br><span class="line">    cumulativeGasUsed: 1910026,</span><br><span class="line">    from: "0x5a1d4c5249f27ef473a6ab3b715f03313fd1f560",</span><br><span class="line">    gasUsed: 1910026,</span><br><span class="line">    logs: [],</span><br><span class="line">    logsBloom: "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",</span><br><span class="line">    root: "0x8f0fb37f003cb64fcbde2adefd1adcf1d588833241fad6e14b9439d26c36bf05",</span><br><span class="line">    to: null,</span><br><span class="line">    transactionHash: "0x21db4aef57dab234ec12f864be40cd4e8a598262ffdb02a9e1d3b14b2a200b9a",</span><br><span class="line">    transactionIndex: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>交易收据包含着日志信息的交易收据的根Hash值保存在头中。 就像你在商店买东西时收到的收据一样，以太坊为每笔交易都产生一个收据。像你期望的那样，每个收据包含关于交易的特定信息，这些信息为：</p><ul><li>区块序号(blockNumber)</li><li>区块Hash值(blockHash)</li><li>交易Hash值(transactionHash)</li><li>当前交易使用了的gas(gasUsed)</li><li>在当前交易执行完之后当前块使用的累计gas(cumulativeGasUsed)</li><li>执行当前交易时创建的日志(logsBloom)</li><li>等等</li></ul></blockquote><blockquote><p>难度调整</p></blockquote><p>区块的难度是被用来在验证区块时加强一致性。创世纪区块的难度是131,072，有一个特殊的公式用来计算之后的每个块的难度。如果某个区块比前一个区块验证的更快，以太坊协议就会增加区块的难度。<br>区块的难度影响nonce，它是在挖矿时必须要使用工作量证明算法计算出的一个Hash值。<br>区块难度和nonce之间的关系用数学形式表达就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &lt;= (<span class="number">2</span>^<span class="number">256</span>/Hd)</span><br></pre></td></tr></table></figure><p>Hd代表的是难度。<br>找到符合难度阈值的nonce唯一方法就是使用工作量证明算法来列举所有的可能性。找到解决方案预期时间与难度成正比—难度越高，找到nonce就越困难，因此验证一个区块也就越难，这又相应地增加了验证新块所需的时间。所以，通过调整区块难度，协议可以调整验证区块所需的时间。<br>另一方面，如果验证时间变的越来越慢，协议就会降低难度。这样的话，验证时间自我调节以保持恒定的速率—平均每15s一个块。</p><h4 id="以太坊的应用场景"><a href="#以太坊的应用场景" class="headerlink" title="以太坊的应用场景"></a>以太坊的应用场景</h4><p>一般来讲，以太坊之上有三种应用。第一类是金融应用，为用户提供更强大的用他们的钱管理和参与合约的方法。包括子货币，金融衍生品，对冲合约，储蓄钱包，遗嘱，甚至一些种类的全面的雇佣合约。第二类是半金融应用，这里有钱的存在但也有很重的非金钱的方面，一个完美的例子是为解决计算问题而设的自我强制悬赏。最后，还有在线投票和去中心化治理这样的完全的非金融应用。</p><h4 id="以太坊客户端P2P协议"><a href="#以太坊客户端P2P协议" class="headerlink" title="以太坊客户端P2P协议"></a>以太坊客户端P2P协议</h4><blockquote><p>以太坊客户端 P2P 协议是一个相当标准的加密货币协议,并且能够容易地为其它加密货币使用;仅有的改动是引入了由 Yonatan<br>Sompolinsky 和 Aviv Zohar 在 2013 年 12 月首次引入的“幽灵“协议(“Greedy Heaviest Observed Subtree” (GHOST) protocol);<br>该协议的引入动机和实现细节将在后面作详细介绍。以太坊客户端基本上是被动的;如果没有被触发,它自己做的仅有工作是调用网<br>络守护进程维护连接及定期发送消息索要以当前区块为父区块的区块。然而,该客户端同时会更强大;与只存储与块链相关的有限数<br>据的 bitcoind 不同,以太坊客户端将同时扮演一个功能完整的区块浏览器的后台的角色。</p></blockquote><p>当客户端收到一个消息时,它将执行以下布骤:</p><ol><li>哈希该数据,并且检查该数据与其哈希是否已经接收过,如果是,退出,否则将数据发送给数据分析器。</li><li>确认数据类型。如果该数据项是一个交易,如果交易合法则将其加入本地交易列表,加入当前区块并发布至网络。如果该数据项是一个消息,作出回应。如果该数据项是一个区块,转入步骤 3。</li><li>检查区块中的“父区块“参数是否已存储于数据库中。如果没有,退出。</li><li>检查该区块头以及其“叔区块列表”中所有区块头中的工作量证明是否合法,如有任意一个非法,退出。</li><li>检查“叔区块列表”中每一个区块的区块头以确定其是否以该区块的“祖父区块”为父区块。如有任何否,退出。注意叔区块头并不必须在数据库中;他们只需有共同的父区块并有合法的工作量证明。</li><li>检查区块中的时间戳是否最后至未来 15 分钟并且在其父区块的时间戳之后。检查该区块的难度与区块号码匹配。如任何检查失败,退出。</li><li>由该区块的父区块的状态开始,加上该区块中的每一笔合法交易。最后,加上矿工奖励。如果结果状态树的根哈希与区块头中的状态根不匹配,退出。如匹配,将该区块加入数据库并前进至下一步。</li><li>为新区块确定 TD(block) (“总难度”)。TD 由 TD(genesis_block) = 0 及 TD(B) = TD(B.parent) + sum(u.difficulty for u in B.uncles) + B.difficulty 递归定义。如新区块拥有比现区块更高的总难度,则新区块将成为“现区块“并进入下一步,否则,退出。</li><li>如果新区块被改动,向其中加入交易列表中的所有交易,废除交易列表中的所有变为不合法的交易,将该区块及这些交易向全网重新广播。</li></ol><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><h4 id="合约的创建"><a href="#合约的创建" class="headerlink" title="合约的创建"></a>合约的创建</h4><p>回忆一下在以太坊中，有两种账户类型：合约账户和外部拥有账户。当我们说一个交易是“合约创建”，是指交易的目的是创建一个新的合约账户。<br>为了创建一个新的合约账户，我们使用一个特殊的公式来声明新账户的地址。然后我们使用下面的方法来初始化一个账户：</p><ul><li>设置nonce为0</li><li>如果发送者通过交易发送了一定量的Ether作为value，那么设置账户的余额为value</li><li>将存储设置为0</li><li>设置合约的codeHash为一个空字符串的Hash值</li></ul><p>一旦我们完成了账户的初始化，使用交易发送过来的init code（查看”交易和消息”章节来复习一下init code），实际上就创造了一个账户。init code的执行过程是各种各样的。取决于合约的构造器，可能是更新账户的存储，也可能是创建另一个合约账户，或者发起另一个消息通信等等。<br>当初始化合约的代码被执行之后，会使用gas。交易不允许使用的gas超过剩余gas。如果它使用的gas超过剩余gas，那么就会发生gas不足异常(OOG)并退出。如果一个交易由于gas不足异常而退出，那么状态会立刻恢复到交易前的一个点。发送者也不会获得在gas用完之前所花费的gas。<br>不过，如果发送者随着交易发送了Ether，即使合约创建失败Ether也会被退回来。<br>如果初始化代码成功的执行完成，最后合约创建的花费会被支付。这些是存储成本，与创建的合约代码大小成正比（再一次，没有免费的午餐）。如果没有足够的剩余gas来支付最后的花费，那么交易就会再次宣布gas不足异常并中断退出。<br>如果所有的都正常进行没有任何异常出现，那么任何剩余的未使用gas都会被退回给原始的交易发送者，现在改变的状态才被允许永久保存。</p><h4 id="消息通信"><a href="#消息通信" class="headerlink" title="消息通信"></a>消息通信</h4><p>消息通信的执行与合约创建比较类似，只不过有一点点区别。<br>由于没有新账户被创建，所以消息通信的执行不包含任何的init code。不过，它可以包含输入数据，如果交易发送者提供了此数据的话。一旦执行，消息通信同样会有一个额外的组件来包含输出数据，如果后续执行需要此数据的话组件就会被使用。<br>就像合约创建一样，如果消息通信执行退出是因为gas不足或交易无效（例如栈溢出，无效跳转目的地或无效指令），那么已使用的gas是不会被退回给原始触发者的。相反，所有剩余的未使用gas也会被消耗掉，并且状态会被立刻重置为余额转移之前的那个点。<br>没有任何方法停止或恢复交易的执行而不让系统消耗你提供的所有gas，直到最新的以太坊更新。例如，假设你编写了一个合约，当调用者没有授权来执行这些交易的时候抛出一个错误。在以太坊的前一个版本中，剩余的gas也会被消耗掉，并且没有任何gas退回给发送者。但是拜占庭更新包括了一个新的“恢复”代码，允许合约停止执行并且恢复改变的状态而不消耗剩余的gas，此代码还拥有返回交易失败原因的能力。如果一个交易是由于恢复而退出，那么未使用的gas就会被退回给发送者。</p><blockquote><p>参考</p></blockquote><ol><li><a href="https://ethfans.org/wikis/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书(中文)</a></li><li><a href="http://www.linktimetech.com/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6-Ethereum.pdf" target="_blank" rel="noopener">以太坊（Ethereum）:下一代智能合约和去中心化应用平台</a></li><li><a href="https://blog.csdn.net/wo541075754/article/details/54632929" target="_blank" rel="noopener">(转)Merkle Tree（默克尔树）算法解析</a></li><li><a href="http://me.tryblockchain.org/getting-up-to-speed-on-ethereum.html" target="_blank" rel="noopener">以太坊开发入门，完整入门篇</a></li><li><a href="https://medium.com/@preethikasireddy/how-does-ethereum-work-anyway-22d1df506369" target="_blank" rel="noopener">How does Ethereum work, anyway?</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/learn_eth.jpeg&quot; alt=&quot;ethereum&quot; width=&quot;750px&quot; height=&quot;300px&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;区块链&quot;&gt;&lt;a href=&quot;#区块链&quot; class=&quot;headerlink&quot; title=&quot;区块链
      
    
    </summary>
    
    
      <category term="blockchain" scheme="http://successli.cn/tags/blockchain/"/>
    
      <category term="ethereum" scheme="http://successli.cn/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Java多线程</title>
    <link href="http://successli.cn/2017/12/30/%E6%B5%85%E8%B0%88Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://successli.cn/2017/12/30/浅谈Java多线程/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-07-21T15:08:01.262Z</updated>
    
    <content type="html"><![CDATA[<p><img src="img/线程完整生命周期.jpg" alt="ethereum" width="750px" height="240px"></p><a id="more"></a><h3 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1.线程与进程"></a>1.线程与进程</h3><blockquote><p><strong>进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含多个线程。（进程是资源分配的最小单位）</strong></p></blockquote><blockquote><p><strong>线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）</strong></p></blockquote><h3 id="2-线程的创建"><a href="#2-线程的创建" class="headerlink" title="2.线程的创建"></a>2.线程的创建</h3><h4 id="2-1-线程的两种创建方式"><a href="#2-1-线程的两种创建方式" class="headerlink" title="2.1 线程的两种创建方式"></a>2.1 线程的两种创建方式</h4><blockquote><p>a.继承java.lang.Thread类 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by succe on 2018/1/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主动创建的第"</span>+num+<span class="string">"个线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主动创建的第<span class="number">1</span>个线程</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>创建好了自己的线程类之后，就可以创建线程对象了，然后通过<strong>start()</strong>方法去启动线程。注意，不是调用run()方法启动线程，run()方法中只是定义需要执行的任务，如果调用run方法， 即相当于在主线程中执行run方法，跟普通的方法调用没有任何区别，此时并不会创建一个新的线程来执行定义的任务。</p><p>start()方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。从程序运行的结果可以发现，多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。</p><p><strong><em>start()方法调用和 run()方法调用的区别：</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by succe on 2018/1/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程ID:"</span>+Thread.currentThread().getId());</span><br><span class="line">        MyThread03 thread1 = <span class="keyword">new</span> MyThread03(<span class="string">"thread1"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        MyThread03 thread2 = <span class="keyword">new</span> MyThread03(<span class="string">"thread2"</span>);</span><br><span class="line">        thread2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread03</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread03</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span>+name+<span class="string">" 子线程ID:"</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主线程ID:<span class="number">1</span></span><br><span class="line">name:thread2 子线程ID:<span class="number">1</span></span><br><span class="line">name:thread1 子线程ID:<span class="number">11</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p><strong><em>线程 Thread2()和主线程 ID相同，说明：通过 run()方法调用的线程不会创建新的线程，而是在主线程上直接运行 run()方法，和普通的方法没有区别</em></strong></p><blockquote><p>b.实现java.lang.Runable接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by succe on 2018/1/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">        MyRunable myRunable = <span class="keyword">new</span> MyRunable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(myRunable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主线程ID：<span class="number">1</span></span><br><span class="line">子线程ID：<span class="number">11</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Runnable的中文意思是“任务”，顾名思义，通过实现Runnable接口，我们定义了一个子任务，然后将子任务交由Thread去执行。注意，这种方式必须将Runnable作为Thread类的参数，然后通过Thread的start方法 来创建一个新线程来执行该子任务。</p><p>事实上，查看Thread类的实现源代码会发现Thread类是实现了Runnable接口的。</p><p>在Java中，这2种方式都可以用来创建线程去执行子任务，具体选择哪一种方式要看自己的需求。直接继承Thread类的话，可能比实现Runnable接口看起来更加简洁，但是由于<strong><em>Java只允许单继承，所以如果自定义类需 要继承其他类，则只能选择实现Runnable接口。</em></strong></p><h4 id="2-2-Thread与Runnable的区别"><a href="#2-2-Thread与Runnable的区别" class="headerlink" title="2.2 Thread与Runnable的区别"></a>2.2 Thread与Runnable的区别</h4><p><strong><em>实现Runable接口比继承Thread类所具有的优势：</em></strong></p><p>a) 适合多个相同程序代码的线程去处理同一个资源</p><p>b) 可以避免Java中单继承的限制</p><p>c) 代码可以被多个线程共享，而代码的数据独立</p><p>d) 线程池不接受继承Thread的线程类</p><blockquote><p>注：main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。</p><p>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM实习在就是在操作系统中启动了一个进程。</p></blockquote><h3 id="3-线程对象常用函数"><a href="#3-线程对象常用函数" class="headerlink" title="3.线程对象常用函数"></a>3.线程对象常用函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  使该线程开始执行；Java 虚拟机调用该线程的 run 方法</span></span><br><span class="line"><span class="function">2)<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，</span></span><br><span class="line"><span class="function">  该方法不执行任何操作并返回</span></span><br><span class="line"><span class="function">3)<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">  改变线程名称，使之与参数 name 相同</span></span><br><span class="line"><span class="function">4)<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> priority)</span></span></span><br><span class="line"><span class="function">  更改线程的优先级</span></span><br><span class="line"><span class="function">5)<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDaemon</span><span class="params">(<span class="keyword">boolean</span> on)</span></span></span><br><span class="line"><span class="function">  将该线程标记为守护线程或用户线程</span></span><br><span class="line"><span class="function">6)<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millisec)</span></span></span><br><span class="line"><span class="function">  等待该线程终止的时间最长为 millis 毫秒</span></span><br><span class="line"><span class="function">7)<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  中断线程</span></span><br><span class="line"><span class="function">8)<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  测试线程是否处于活动状态</span></span><br></pre></td></tr></table></figure><h4 id="3-1-wait-notify-notifyAll"><a href="#3-1-wait-notify-notifyAll" class="headerlink" title="3.1 wait/notify/notifyAll"></a>3.1 wait/notify/notifyAll</h4><blockquote><p>这是一组 Object 类的方法</p><p>注意：这三个方法都必须在同步的范围内调用</p></blockquote><ul><li>wait</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wait有三种方式的调用</span><br><span class="line">wait()</span><br><span class="line">必要要由 notify 或者 notifyAll 来唤醒</span><br><span class="line">wait(<span class="keyword">long</span> timeout)</span><br><span class="line">在指定时间内，如果没有notify或notifAll方法的唤醒，也会自动唤醒。</span><br><span class="line">wait(<span class="keyword">long</span> timeout,<span class="keyword">long</span> nanos)</span><br><span class="line">本质上还是调用一个参数的方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">             <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">             timeout++;</span><br><span class="line">       &#125;</span><br><span class="line">       wait(timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>notify/notifyAll</li></ul><blockquote><p>notify只能唤醒一个处于wait的线程</p><p>notifyAll可以唤醒全部处于wait的线程</p></blockquote><h4 id="3-2-sleep-yield-join"><a href="#3-2-sleep-yield-join" class="headerlink" title="3.2 sleep/yield/join"></a>3.2 sleep/yield/join</h4><blockquote><p>这是一组Thread类的方法</p></blockquote><ul><li><p>sleep</p><p>让当前线程暂停指定时间，只是让出CPU的使用权，并不释放锁。</p></li><li><p>yield</p><p>暂停当前线程的执行，也就是当前CPU的使用权，让其他线程有机会执行，不能指定时间。会让当前线程从运行状态转变为就绪状态。    </p></li><li><p>join</p><p>等待调用 join 方法的线程执行结束，才执行后面的代码，其调用一定要在 start 方法之后。<br>使用场景：当父线程需要等待子线程执行结束才执行后面内容或者需要某个子线程的执行结果会用到 join 方法。</p></li></ul><h4 id="3-3-volatile关键字"><a href="#3-3-volatile关键字" class="headerlink" title="3.3 volatile关键字"></a>3.3 volatile关键字</h4><p>​    java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。Java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。</p><p><strong>原理：</strong></p><blockquote><p>多线程的内存模型：main memory（主存）、working memory（线程栈），在处理数据时，线程会把值从主存load到本地栈，完成操作后再save回去(volatile关键词的作用：每次针对该变量的操作都激发一次load and save)。</p></blockquote><p><strong>作用：</strong></p><blockquote><p>内存可见性（多线程操作的时候，一个线程修改了一个变量的值 ，其他线程能立即看到修改后的值）</p><p>防止重排序（即程序的执行顺序按照代码的顺序执行，处理器为了提高代码的执行效率可能会对代码进行重排序）</p></blockquote><h4 id="3-4-synchronized关键字"><a href="#3-4-synchronized关键字" class="headerlink" title="3.4 synchronized关键字"></a>3.4 synchronized关键字</h4><blockquote><p>作用：确保线程互斥的访问同步代码</p></blockquote><p><strong>使用：</strong></p><ul><li><p>synchronized单独使用</p><ul><li><p>代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   Object lock;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">         ..<span class="keyword">do</span> something</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一时间，只有一个线程可以使用lock实例。</p></li><li><p>直接用于方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        ..<span class="keyword">do</span> something</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一时间，只有一个线程可以调用run()方法。</p></li></ul></li><li><p>synchronized,wait,notify结合使用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//synchronized, wait, notify结合:典型场景生产者消费者问题</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生产者生产出来的产品交给店员</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.product &gt;= MAX_PRODUCT)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">try</span></span><br><span class="line">          &#123;</span><br><span class="line">              wait();  </span><br><span class="line">              System.out.println(<span class="string">"产品已满,请稍候再生产"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span>(InterruptedException e)</span><br><span class="line">          &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">this</span>.product++;</span><br><span class="line">      System.out.println(<span class="string">"生产者生产第"</span> + <span class="keyword">this</span>.product + <span class="string">"个产品."</span>);</span><br><span class="line">      notifyAll();   <span class="comment">//通知等待区的消费者可以取出产品了</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 消费者从店员取产品</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.product &lt;= MIN_PRODUCT)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">try</span></span><br><span class="line">          &#123;</span><br><span class="line">              wait(); </span><br><span class="line">              System.out.println(<span class="string">"缺货,稍候再取"</span>);</span><br><span class="line">          &#125; </span><br><span class="line">          <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">          &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      System.out.println(<span class="string">"消费者取走了第"</span> + <span class="keyword">this</span>.product + <span class="string">"个产品."</span>);</span><br><span class="line">      <span class="keyword">this</span>.product--;</span><br><span class="line">      notifyAll();   <span class="comment">//通知等待去的生产者可以生产产品了</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-线程状态转换"><a href="#4-线程状态转换" class="headerlink" title="4.线程状态转换"></a>4.线程状态转换</h3><blockquote><p>线程的优先级：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The minimum priority that a thread can have.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default priority that is assigned to a thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The maximum priority that a thread can have.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p><p>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p><p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。 具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p><p>1、Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。</p><p> 每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。</p><p>线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。</p><p>JVM提供了10个线程优先级，但与常见的操作系统都不能很好的映射。</p><p> 2、线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。</p><p>3、线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这个两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。</p><p>4、线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。</p><p>5、线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。</p><p>6、线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。</p><h3 id="5-线程的生命周期"><a href="#5-线程的生命周期" class="headerlink" title="5.线程的生命周期"></a>5.线程的生命周期</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/线程完整生命周期.jpg" alt="线程的生命周期" title="">                </div>                <div class="image-caption">线程的生命周期</div>            </figure><p>线程在一个动态的生命周期中，会有不同的状态：</p><p><strong>创建（new）</strong>: 使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。<br><strong>就绪（runnable）</strong>: 当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。<br><strong>运行（running）</strong>: 如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。<br><strong>阻塞（blocked）</strong>: 如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p><ul><li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li><li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li><li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</li></ul><p><strong>终止（dead）</strong>: 一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p><h3 id="6-遇到的问题和解决方法"><a href="#6-遇到的问题和解决方法" class="headerlink" title="6.遇到的问题和解决方法"></a>6.遇到的问题和解决方法</h3><ul><li>遇到的问题</li></ul><p>在创建线程的过程中，实现了一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by succe on 2018/1/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            MyThread01 thread01 = <span class="keyword">new</span> MyThread01();</span><br><span class="line">            thread01.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主动创建的第"</span>+num+<span class="string">"个线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">主动创建的第<span class="number">100</span>个线程</span><br><span class="line">主动创建的第<span class="number">100</span>个线程</span><br><span class="line">主动创建的第<span class="number">100</span>个线程</span><br><span class="line">主动创建的第<span class="number">100</span>个线程</span><br><span class="line">主动创建的第<span class="number">100</span>个线程</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么最后输出的全部都是100呢？</p><p>期望输出的结果：1,2,3,4,5……</p><p>原因：main线程执行过快，main线程执行结束时，num累加到了 100，子线程还处于runnable就绪状态。</p></blockquote><ul><li>解决办法</li></ul><p><strong>第一种解决方法：调用Thread.sleep()方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by succe on 2018/1/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            MyThread01 thread01 = <span class="keyword">new</span> MyThread01();</span><br><span class="line">            thread01.start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//解决</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主动创建的第"</span>+num+<span class="string">"个线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thread.sleep()方法可以让main线程暂定执行一小段时间。</p><p><strong>第二种解决方法：调用子线程的join()方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by succe on 2018/1/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            MyThread01 thread01 = <span class="keyword">new</span> MyThread01();</span><br><span class="line">            thread01.start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                thread01.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主动创建的第"</span>+num+<span class="string">"个线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">主动创建的第<span class="number">1</span>个线程</span><br><span class="line">主动创建的第<span class="number">2</span>个线程</span><br><span class="line">主动创建的第<span class="number">3</span>个线程</span><br><span class="line">主动创建的第<span class="number">4</span>个线程</span><br><span class="line">主动创建的第<span class="number">5</span>个线程</span><br><span class="line">主动创建的第<span class="number">6</span>个线程</span><br><span class="line">主动创建的第<span class="number">7</span>个线程</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">主动创建的第<span class="number">99</span>个线程</span><br><span class="line">主动创建的第<span class="number">100</span>个线程</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>调用子线程的join()方法，可以让main线程等待子线程的执行，然后再继续执行子线程。</p><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><ul><li>线程的创建方式推荐实现Runnable接口</li><li>本质上，volatile就是不去缓存，直接取值。在线程安全的情况下加volatile会牺牲性能。</li><li>继承Thread类时，最好要设置线程名称 Thread.name，并设置线程组 ThreadGroup，目的是方便管理。在出现问题的时候，打印线程栈 (jstack -pid) 一眼就可以看出是哪个线程出现了问题。</li></ul><p>参考：<a href="http://blog.csdn.net/evankaka/article/details/44153709" target="_blank" rel="noopener">Java多线程学习（吐血超详细总结）</a><br><a href="http://movesan.me/2017/02/16/java-thread/" target="_blank" rel="noopener">Java核心技术—多线程（THREAD）</a><br><a href="https://www.jianshu.com/p/01188fa8e511" target="_blank" rel="noopener">Java并发编程，你需要知道的</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;img/线程完整生命周期.jpg&quot; alt=&quot;ethereum&quot; width=&quot;750px&quot; height=&quot;240px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://successli.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 形参与实参</title>
    <link href="http://successli.cn/2017/09/30/Java-%E5%BD%A2%E5%8F%82%E4%B8%8E%E5%AE%9E%E5%8F%82/"/>
    <id>http://successli.cn/2017/09/30/Java-形参与实参/</id>
    <published>2017-09-29T16:00:00.000Z</published>
    <updated>2018-07-21T15:08:01.264Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在头条上看到一道经典面试题,引发了一些思考。也是写这篇文章的导火索。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>请看题:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">1</span>;</span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//请实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到这个题后 瞬间觉得有坑。也觉得为什么要书写一个<code>swap</code>方法呢？如下实现不是更简单:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">1</span>; </span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">        Integer tmp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line">a=<span class="number">2</span>,b=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>完美实现交换。但是请注意，这是一道面试题，要的就是考验一些知识点。所以还是老老实实的实现<code>swap</code>方法吧。<br>有的同学可能会想，<code>Integer</code> 是一个包装类型,是对Int的装箱和拆箱操作。其实也是一个对象。既然是对象，直接更改对象的引用不就行了？<br>思路没问题，我们首先看看实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">       Integer tmp = numa;</span><br><span class="line">       numa = numb;</span><br><span class="line">       numb = tmp;</span><br><span class="line">       System.out.println(<span class="string">"numa="</span> + numa + <span class="string">",numb="</span> + numb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line">numa=<span class="number">2</span>,numb=<span class="number">1</span></span><br><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>不出意外,没有成功<br>这是什么原因呢？<br>技术老手一看就知道问题出在<a href="https://www.baidu.com/s?wd=java%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">形参和实参</a><br>混淆了</p><h3 id="JAVA的形参和实参的区别"><a href="#JAVA的形参和实参的区别" class="headerlink" title="JAVA的形参和实参的区别:"></a>JAVA的形参和实参的区别:</h3><p><strong>形参</strong> 顾名思义:就是形式参数，用于定义方法的时候使用的参数，是用来接收调用者传递的参数的。<br>    形参只有在方法被调用的时候，虚拟机才会分配内存单元，在方法调用结束之后便会释放所分配的内存单元。<br>    因此,形参只在方法内部有效，所以针对引用对象的改动也无法影响到方法外。</p><p><strong>实参</strong> 顾名思义:就是实际参数，用于调用时传递给方法的参数。实参在传递给别的方法之前是要被预先赋值的。<br>    在本例中 swap 方法 的numa, numb 就是形参，传递给 swap 方法的 a,b 就是实参</p><p>注意:<br>在<code>值传递</code>调用过程中，只能把实参传递给形参，而不能把形参的值反向作用到实参上。在函数调用过程中，形参的值发生改变，而实参的值不会发生改变。<br>而在<code>引用传递</code>调用的机制中，实际上是将实参引用的地址传递给了形参，所以任何发生在形参上的改变也会发生在实参变量上。<br>那么问题来了，什么是<code>值传递</code>和<code>引用传递</code></p><h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><p>在谈<code>值传递</code>和<code>引用传递</code>之前先了解下 Java的数据类型有哪些</p><h4 id="JAVA的数据类型"><a href="#JAVA的数据类型" class="headerlink" title="JAVA的数据类型"></a>JAVA的数据类型</h4><p>Java 中的数据类型分为两大类，<code>基本类型</code>和<code>对象类型</code>。相应的，变量也有两种类型：<code>基本类型</code>和<code>引用类型</code><br><code>基本类型</code>的变量保存<code>原始值</code>，即它代表的值就是数值本身,<code>原始值</code>一般对应在内存上的<code>栈区</code><br>而<code>引用类型</code>的变量保存<code>引用值</code>，<code>引用值</code>指向内存空间的地址。代表了某个对象的引用，而不是对象本身。对象本身存放在这个引用值所表示的地址的位置。<code>被引用的对象</code>对应内存上的<code>堆内存区</code>。<br>基本类型包括：<code>byte</code>,<code>short</code>,<code>int</code>,<code>long</code>,<code>char</code>,<code>float</code>,<code>double</code>,<code>boolean</code> 这八大基本数据类型<br>引用类型包括：<code>类类型</code>，<code>接口类型</code>和<code>数组</code>  </p><h4 id="变量的基本类型和引用类型的区别"><a href="#变量的基本类型和引用类型的区别" class="headerlink" title="变量的基本类型和引用类型的区别"></a>变量的基本类型和引用类型的区别</h4><p>基本数据类型在声明时系统就给它分配空间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;<span class="comment">//虽然没有赋值，但声明的时候虚拟机就会 分配 4字节 的内存区域,而引用数据类型不同，它声明时只给变量分配了引用空间，而不分配数据空间:</span></span><br><span class="line">String str;<span class="comment">//声明的时候没有分配数据空间，只有 4byte 的引用大小，在栈区，而在堆内存区域没有任何分配</span></span><br><span class="line">str.length(); <span class="comment">//这个操作就会报错，因为堆内存上还没有分配内存区域，而 a = 1; 这个操作就不会报错。</span></span><br></pre></td></tr></table></figure></p><p>好了，Java的数据类型说完了，继续我们的<code>值传递</code>和<code>引用传递</code>的话题。<br>先背住一个概念:<code>基本类型</code>的变量是<code>值传递</code>；<code>引用类型</code>的变量<br>结合前面说的 <code>形参</code>和<code>实参</code>。</p><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><p>方法调用时，实际参数把它的值传递给对应的形式参数，函数接收的是原始值的一个copy，<br>此时内存中存在两个相等的基本类型，即实际参数和形式参数，后面方法中的操作都是对形参这个值的修改，不影响实际参数的值</p><h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><p>也称为<code>地址传递</code>，<code>址传递</code>。方法调用时，实际参数的引用(地址，而不是参数的值)被传递给方法中相对应的形式参数，函数接收的是原始值的内存地址<br>在方法执行中，形参和实参内容相同，指向同一块内存地址，方法执行中对引用的操作将会影响到实际对象<br>通过例子来说话:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> age;</span><br><span class="line">       Person(<span class="keyword">int</span> age) &#123;</span><br><span class="line">           <span class="keyword">this</span>.age = age;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">       testValueT(a);</span><br><span class="line">       System.out.println(<span class="string">"a="</span> + a);</span><br><span class="line">       Person person = <span class="keyword">new</span> Person(<span class="number">20</span>);</span><br><span class="line">       testReference(person);</span><br><span class="line">       System.out.println(<span class="string">"person.age="</span> + person.age);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testValueT</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">       a = <span class="number">200</span>;</span><br><span class="line">       System.out.println(<span class="string">"int testValueT a="</span> + a);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReference</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">       person.age = <span class="number">10</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> testValueT a=<span class="number">200</span></span><br><span class="line">a=<span class="number">100</span></span><br><span class="line">person.age=<span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>看见 <code>值传递</code> a的值并没有改变，而 <code>引用传递</code>的 persion.age已经改变了<br>有人说<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReference</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        person = <span class="keyword">new</span> Person(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么 输出的 person.age 还是20呢？<br>我想说 了解一下什么是<code>引用类型</code>吧？ 方法内把 <code>形参</code>的地址引用换成了另一个对象，并没有改变这个对象,并不能影响 外边<code>实参</code>还引用原来的对象，因为 形参只在方法内有效哦。</p><p>有人或许还有疑问，按照文章开头的例子，<code>Integer</code>也是 <code>引用类型</code>该当如何呢？<br>其实 类似的 <code>String</code>,<code>Integer</code>,<code>Float</code>,<code>Double</code>,<code>Short</code>,<code>Byte</code>,<code>Long</code>,<code>Character</code>等等基本包装类型类。因为他们本身没有提供方法去改变内部的值，例如<code>Integer</code> 内部有一个<code>value</code> 来记录<code>int</code>基本类型的值，但是没有提供修改它的方法，而且 也是<code>final</code>类型的，无法通过<code>常规手段</code>更改。<br>所以虽然他们是<code>引用类型</code>的，但是我们可以认为它是<code>值传递</code>,这个也只是<code>认为</code>,事实上还是<code>引用传递</code>,<code>址传递</code>。</p><hr><p>好了，基础知识补充完毕，然我们回到面试题吧</p><hr><p><strong>回归正题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        Integer tmp = numa;</span><br><span class="line">        numa = numb;</span><br><span class="line">        numb = tmp;</span><br><span class="line">        System.out.println(<span class="string">"numa="</span> + numa + <span class="string">",numb="</span> + numb);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过补习基础知识，我们很明显知道 上面这个方法实现替换 是不可行的。因为<code>Interger</code>虽然是<code>引用类型</code><br>但是上述操作只是改变了<code>形参</code>的引用，而没有改变<code>实参</code>对应的<code>对象</code>。</p><p>那么思路来了，我们<code>通过特殊手段</code>改变 <code>Integer</code>内部的<code>value</code>属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        Integer tmp = numa;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(numa, numb);<span class="comment">//成功的将numa 引用的 1的对象 值改为 2</span></span><br><span class="line">            field.set(numb, tmp); <span class="comment">//由于 tmp 也是指向 numa 未改变前指向的堆 即对象1 ，经过前一步，已经将对象1的值改为了2，自然 numb 也是2，所以改动失效</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>输出结果:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line">a=<span class="number">2</span>,b=<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p><a href="">又来疑问了</a>？为何 <code>a</code>的值改变成功，而<code>b</code>的改变失败呢？</p><p><em>见代码注释</em><br>所以其实 <code>field.set(numb, tmp);</code> 是更改成功的，只是 tmp 经过前一行代码的执行，已经变成了 2。<br>那么如何破呢？<br>我们有了一个思路，既然是 <code>tmp</code>的引用的对象值变量，那么我让<code>tmp</code>不引用 <code>numa</code>了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> tmp = numa.intValue();<span class="comment">//tmp 定义为基本数据类型</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">           field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           field.set(numa, numb);<span class="comment">//这个时候并不改变 tmp 的值</span></span><br><span class="line">           field.set(numb, tmp);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这种情况下 对 <code>numa</code> 这个对象的修改就不会导致 <code>tmp</code> 的值变化了,看一下运行结果</p><pre><code>a=1,b=2a=2,b=2</code></pre><p>这是为啥？有没有<code>快疯</code>啦？<br>难道我们的思路错了？<br>先别着急，我们看看这个例子：<br>仅仅是将前面的例子 <code>a</code>的值改为 129，<code>b</code>的值改为130</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">129</span>;</span><br><span class="line">        Integer b = <span class="number">130</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = numa.intValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(numa, numb);</span><br><span class="line">            field.set(numb, tmp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">129</span>,b=<span class="number">130</span></span><br><span class="line">a=<span class="number">130</span>,b=<span class="number">129</span></span><br></pre></td></tr></table></figure></p><p>有没有<code>怀疑人生</code>？我们的思路没有问题啊?为什么 换个数值就行了呢？<br>我们稍微修改一下程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        Integer b = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = numa.intValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(numa, numb);</span><br><span class="line">            field.set(numb, tmp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p> 运行结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line">a=<span class="number">2</span>,b=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><em>哎？为啥 1 和 2 也可以了?</em><br><em>我们这时肯定猜想和<code>Integer</code>的装箱 拆箱有关</em></p><h3 id="装箱，拆箱-概念"><a href="#装箱，拆箱-概念" class="headerlink" title="装箱，拆箱 概念"></a>装箱，拆箱 概念</h3><h4 id="Integer的装箱操作"><a href="#Integer的装箱操作" class="headerlink" title="Integer的装箱操作"></a>Integer的装箱操作</h4><p>为什么 <code>Integer a = 1</code> 和 <code>Integer a = new Integer(1)</code> 效果不一样<br>那就瞅瞅源码吧？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</span></span><br><span class="line"><span class="comment"> * required, this method should generally be used in preference to</span></span><br><span class="line"><span class="comment"> * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</span></span><br><span class="line"><span class="comment"> * to yield significantly better space and time performance by</span></span><br><span class="line"><span class="comment"> * caching frequently requested values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method will always cache values in the range -128 to 127,</span></span><br><span class="line"><span class="comment"> * inclusive, and may cache other values outside of this range.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过注释知道，java推荐 <code>Integer.valueOf</code> 方式初始化一个<code>Interger</code>因为有 缓存了<code>-128 - 127</code>的数字<br>我们直接定义 <code>Integer a = 1</code> 具有这个功能，所以 Jvm 底层实现 是通过 <code>Integer.valueOf</code>这个方法<br>再看 <code>field.set(numb, tmp);</code><br>我们打断点，发现通过反射设置 <code>value</code>时 竟然走了 <code>Integer.valueOf</code> 方法<br>下面是 我们调用 <code>swap</code>前后的 <code>IntegerCache.cache</code> 值得变化</p><h5 id="反射修改前"><a href="#反射修改前" class="headerlink" title="反射修改前:"></a>反射修改前:</h5><p><img src="/img/java_before_change.jpg" alt="">  </p><h5 id="反射修改后"><a href="#反射修改后" class="headerlink" title="反射修改后"></a>反射修改后</h5><p><img src="/img/java_after_chang.jpg" alt=""><br>在反射修改前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntegerCache.cache[<span class="number">128</span>]=<span class="number">0</span></span><br><span class="line">IntegerCache.cache[<span class="number">129</span>]=<span class="number">1</span></span><br><span class="line">IntegerCache.cache[<span class="number">130</span>]=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>通过反射修改后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntegerCache.cache[<span class="number">128</span>]=<span class="number">0</span></span><br><span class="line">IntegerCache.cache[<span class="number">129</span>]=<span class="number">2</span></span><br><span class="line">IntegerCache.cache[<span class="number">130</span>]=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>再调用 <code>field.set(numb, tmp)</code> tmp这时等于1 对应的 角标 129 ,但是这个值已经变成了2<br>所以出现了刚才 <code>奇怪的结果</code><br>原来都是<code>缓存的锅</code><br>下面趁机再看个例子 加深理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer testA = <span class="number">1</span>;</span><br><span class="line">Integer testB = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Integer testC = <span class="number">128</span>;</span><br><span class="line">Integer testD = <span class="number">128</span>;</span><br><span class="line">System.out.println(<span class="string">"testA=testB "</span> + (testA == testB) + <span class="string">",\ntestC=testD "</span> + (testC == testD));</span><br></pre></td></tr></table></figure><p> 输出结果:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testA=testB <span class="keyword">true</span>,</span><br><span class="line">testC=testD <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>通过这小示例，在 -128 到 127的数字都走了缓存，这样 <code>testA</code> 和 <code>testB</code>引用的是同一片内存区域的同一个对象。<br>而 <code>testC</code> <code>testD</code> 数值大于127 所以 没有走缓存，相当于两个<code>Integer</code>对象，在堆内存区域有两个对象。<br>两个对象自如不相等。<br>在前面的示例中 我们 通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer b = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>方式初始化 <code>a</code>,<code>b</code> 我们的交换算法没有问题，也是这个原因。</p><h5 id="那么到目前为止我们的swap-方法可以完善啦"><a href="#那么到目前为止我们的swap-方法可以完善啦" class="headerlink" title="那么到目前为止我们的swap 方法可以完善啦"></a>那么到目前为止我们的<code>swap</code> 方法可以完善啦</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = numa.intValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(numa, numb);</span><br><span class="line">            field.set(numb, <span class="keyword">new</span> Integer(tmp));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只需将之前的 <code>field.set(numb, tmp)</code> 改为 <code>field.set(numb, new Integer(tmp))</code></p><p>到此, 这个面试我们已经通过了，还有一个疑问我没有解答。<br>为什么 <code>field.set(numb, tmp)</code> 会执行 <code>Integer.valueOf()</code> 而 <code>field.set(numb, new Integer(tmp))</code> 不会执行。<br>这就是<code>Integer的装箱</code>操作，当 给 <code>Integer.value</code> 赋值 <code>int</code>时，JVM 检测到 <code>int不是Integer类型</code>,需要装箱，才执行了<code>Integer.valueOf()</code>方法。而<code>field.set(numb, new Integer(tmp))</code> 设置的 是Integer类型了，就不会再拆箱后再装箱。</p><h3 id="Over-Thanks"><a href="#Over-Thanks" class="headerlink" title="Over Thanks"></a>Over Thanks</h3><blockquote><p>注：（转载）<a href="https://dailycast.github.io/Java-形参与实参" target="_blank" rel="noopener">DailyCast博客-Java形参与实参</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天在头条上看到一道经典面试题,引发了一些思考。也是写这篇文章的导火索。&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;请看题:&lt;br&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="Java" scheme="http://successli.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>搭建successli个人技术博客</title>
    <link href="http://successli.cn/2017/07/20/%E6%90%AD%E5%BB%BAsuccessli%E4%B8%AA%E4%BA%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    <id>http://successli.cn/2017/07/20/搭建successli个人技术博客/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2018-07-21T15:08:01.264Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/GitHub+HEXO.png" alt="Github+HEXO" width="750px" height="300px"></p><a id="more"></a><p><code>successli</code>技术博客搭建采用<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">Hexo</a>，一款快速、简洁且高效的博客框架。下面是具体的搭建和更新博客的步骤。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li>根据 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官网文档</a> 安装<code>NodeJS</code>和<code>Git</code>。</li><li>安装<code>NodeJS</code>完成以后，使用<code>npm</code>安装<code>hexo-cli</code>博客管理工具，如果网络不好这个过程通常很慢。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>如果你是博客的发布人员，直接查看<a href="#发布文章"><strong>发布文章</strong></a>段落。</p><ol><li>创建<code>Github</code>仓库<code>successli.github.io</code></li><li>初始化博客系统</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init successli.github.io</span><br></pre></td></tr></table></figure><ol start="3"><li>进入博客目录，并初始化博客。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd successli.github.io/</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ol start="4"><li><p>修改博客基本信息<br>在<code>_config.yml</code>里面修改标题和描述</p></li><li><p>配置博客插件。<br>当前项目目录安装发布工具，</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="6"><li><p>同时安装启动服务插件，以便本地可以启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure></li><li><p>然后在<code>_config.yml</code>里面配置如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/successli/successli.github.io</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>关联<code>Github</code>仓库，并把源码推送到远程，因为<code>master</code>是留给生成文件的，所以发布到了非<code>master</code>分支。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/successli/successli.github.io.git</span><br><span class="line">git checkout -b <span class="built_in">source</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"init blog"</span></span><br><span class="line">git push -u origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure></li><li><p>发布博客<br>直接运行如下命令发布博客，该命令会自动发布内容到<code>master</code>分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li></ol><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><ol><li><p>如果本地没有仓库请<code>clone</code>仓库，并且切换到<code>source</code>分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/successli/successli.github.io.git</span><br><span class="line">git branch source</span><br></pre></td></tr></table></figure></li><li><p><code>Setup</code>本地环境<br>在项目目录运行如下命令安装依赖和初始化环境。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>运行如下命令创建博客文章，后面的参数便是文章的标题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">'搭建successli个人技术博客'</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>source/_posts</code>目录找到刚才对应的文章，进入编辑文档即可。编辑过程中可以使用如下命令启动服务器和实时预览效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure></li><li><p>发布源码<br>编辑文章完成以后运行如下命令发布源码到<code>Github</code>仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;add new post&quot;</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure></li><li><p>发布文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br></pre></td></tr></table></figure></li></ol><p>参考： <a href="https://dailycast.github.io/搭建DailyCast技术博客/" target="_blank" rel="noopener">搭建DailyCast技术博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/GitHub+HEXO.png&quot; alt=&quot;Github+HEXO&quot; width=&quot;750px&quot; height=&quot;300px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://successli.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于Maven构建SSM框架教程</title>
    <link href="http://successli.cn/2016/08/20/%E5%9F%BA%E4%BA%8EMaven%E6%9E%84%E5%BB%BASSM%E6%A1%86%E6%9E%B6/"/>
    <id>http://successli.cn/2016/08/20/基于Maven构建SSM框架/</id>
    <published>2016-08-19T16:00:00.000Z</published>
    <updated>2018-07-21T15:08:01.266Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/spring.png" alt="spring framework" width="750px" height="300px"></p><a id="more"></a><h4 id="1-建立数据库表"><a href="#1-建立数据库表" class="headerlink" title="1.建立数据库表"></a>1.建立数据库表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t_blogger` (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  username varchar(50) DEFAULT NULL,</span><br><span class="line">  password varchar(100) DEFAULT NULL, </span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h4 id="2-Maven方式搭建Spring-SpringMVC-Mybatis环境"><a href="#2-Maven方式搭建Spring-SpringMVC-Mybatis环境" class="headerlink" title="2.Maven方式搭建Spring+SpringMVC+Mybatis环境"></a>2.Maven方式搭建Spring+SpringMVC+Mybatis环境</h4><ul><li><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加连接池druid支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加mybatis支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加mybatis-spring支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-dao --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jdbc驱动包  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><ul><li><h5 id="Spring配置文件applicationContext-xml"><a href="#Spring配置文件applicationContext-xml" class="headerlink" title="Spring配置文件applicationContext.xml"></a>Spring配置文件applicationContext.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用spring-mvc注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/db_springdemo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置mybatis的sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mappers.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:cn.successli.mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.successli.dao"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.successli.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 使用注解的包，包括子集 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.successli.controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><ul><li><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>a.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置web.xml，使其具有springmvc特性，主要配置两处，一个是ContextLoaderListener，一个是DispatcherServlet --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring mvc 配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.配置DispatcherServlet表示，该工程将采用springmvc的方式。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>webmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动项目的时候要加载的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>webmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.spring配置 :配置ContextLoaderListener表示，该工程要以spring的方式启动.启动时会默认在/WEB-INF目录下查找applicationContext.xml</span></span><br><span class="line"><span class="comment">作为spring容器的配置文件，该文件里可以初始化一些bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定Spring Bean的配置文件所在目录。默认配置在WEB-INF目录下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 字符集过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上，Spring+SpringMVC+Mybatis的开发环境基本搭建好。</p><p>建立实体类，完成对数据库的操作。</p></li></ul><h4 id="3-建立实体类及Mapper对象"><a href="#3-建立实体类及Mapper对象" class="headerlink" title="3.建立实体类及Mapper对象"></a>3.建立实体类及Mapper对象</h4><ul><li><p>实体类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.successli.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liyon on 2017/5/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>建立DAO层及Mapper对象</p><p>UserDAO.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.successli.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.successli.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liyon on 2017/5/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">delete</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改某个用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">modify</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户名查找用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"cn.successli.dao.UserDAO"</span>&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"UserResult"</span> type=<span class="string">"cn.successli.entity.User"</span>&gt;</span><br><span class="line">        &lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"password"</span> column=<span class="string">"password"</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"add"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"id"</span>&gt;</span><br><span class="line">        <span class="function">INSERT INTO <span class="title">t_blogger</span> <span class="params">(username, password)</span></span></span><br><span class="line"><span class="function">        <span class="title">VALUES</span> <span class="params">(#&#123;username&#125;,#&#123;password&#125;)</span></span>;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id=<span class="string">"delete"</span>&gt;</span><br><span class="line">        DELETE FROM t_blogger WHERE id = #&#123;id&#125;;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">"modify"</span>&gt;</span><br><span class="line">        UPDATE t_blogger</span><br><span class="line">        SET username = #&#123;username&#125;, password = #&#123;password&#125;</span><br><span class="line">        WHERE id = #&#123;id&#125;;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findUserByName"</span> resultMap=<span class="string">"UserResult"</span>&gt;</span><br><span class="line">        SELECT * FROM t_blogger WHERE username = #&#123;username&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>​</p><h4 id="4-编写测试代码"><a href="#4-编写测试代码" class="headerlink" title="4.编写测试代码"></a>4.编写测试代码</h4></li><li><p>测试代码需要引用的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试类基本配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = <span class="string">"classpath:applicationContext.xml"</span>)</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>测试类的编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.successli.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.successli.entity.User;</span><br><span class="line"><span class="keyword">import</span> junit.framework.Assert;</span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liyon on 2017/5/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAOTest</span> <span class="keyword">extends</span> <span class="title">AbstractJUnit4SpringContextTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"hou"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = userDAO.add(user);</span><br><span class="line">        org.junit.Assert.assertEquals(<span class="number">1</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = userDAO.findUserByName(<span class="string">"hou"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = userDAO.delete(user);</span><br><span class="line">        org.junit.Assert.assertEquals(<span class="number">1</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testModify</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = userDAO.findUserByName(<span class="string">"hou"</span>);</span><br><span class="line">        user.setUsername(<span class="string">"houyr"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = userDAO.modify(user);</span><br><span class="line">        org.junit.Assert.assertEquals(<span class="number">1</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByName</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = userDAO.findUserByName(<span class="string">"hou"</span>);</span><br><span class="line">        org.junit.Assert.assertNotNull(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>测试成功，完成Demo。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/spring.png&quot; alt=&quot;spring framework&quot; width=&quot;750px&quot; height=&quot;300px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java,Maven,IDEA,SSM" scheme="http://successli.cn/tags/Java-Maven-IDEA-SSM/"/>
    
  </entry>
  
  <entry>
    <title>JDBC连接数据库笔记</title>
    <link href="http://successli.cn/2016/06/10/JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
    <id>http://successli.cn/2016/06/10/JDBC连接数据库笔记/</id>
    <published>2016-06-09T16:00:00.000Z</published>
    <updated>2018-07-21T15:08:01.265Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/oracle_java.jpg" alt="ethereum" width="750px" height="240px"></p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>新建一个Java工程</li><li>新建一个数据库warehouse<ul><li>新建表mylist</li><li>向表中添加数据</li></ul></li></ol><p>+—–+————-+<br>| id  | name        |<br>+—–+————-+<br>| 111 | liyongsheng |<br>| 222 | zhangsan    |<br>| 333 | xiaoming    |<br>+—–+————-+</p><h3 id="1-加载JDBC驱动程序"><a href="#1-加载JDBC驱动程序" class="headerlink" title="1.加载JDBC驱动程序"></a>1.加载JDBC驱动程序</h3><blockquote><p>通过 java.lang.Class类的静态方法forName(String className)实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//加载mysql的驱动类</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">    System.Out.Println(<span class="string">"驱动程序加载失败"</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>成功加载mysql的驱动类后会将Driver类的实例注册到DriverManager类中</p></blockquote><h4 id="2-提供JDBC连接的URL"><a href="#2-提供JDBC连接的URL" class="headerlink" title="2.提供JDBC连接的URL"></a>2.提供JDBC连接的URL</h4><ul><li>连接URL定义了连接数据库时的协议、子协议、数据库标识</li></ul><blockquote><p>协议：在JDBC中总是以jdbc开头<br>子协议：是桥接的程序或者数据库管理系统的名称<br>数据库标识：标记找到数据库来源的地址和连接端口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/warehouse?useUnicode=true&amp;characterEncoding=gbk"</span>;</span><br></pre></td></tr></table></figure><h3 id="3-创建数据库的连接"><a href="#3-创建数据库的连接" class="headerlink" title="3.创建数据库的连接"></a>3.创建数据库的连接</h3><ul><li>要连接数据库，需要向java.lang.DriverManager请求并获得一个Connection对象，该对象就代表一个数据库连接</li><li>使用方法如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.getConnect(String url, String username, String password);</span><br></pre></td></tr></table></figure><h3 id="4-创建一个Statement对象"><a href="#4-创建一个Statement对象" class="headerlink" title="4.创建一个Statement对象"></a>4.创建一个Statement对象</h3><blockquote><p>要执行SQL语句，必须获得java.sql.Statement的实例<br>Statement的实例分为三种类型：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行静态SQL语句</span></span><br><span class="line">Statement stmt=connection.createStatement();</span><br><span class="line"><span class="comment">//执行动态SQL语句</span></span><br><span class="line">PreparedStatement pstmt = con.prepareStatement(sql);</span><br><span class="line"><span class="comment">//执行数据库存储过程</span></span><br><span class="line">CallableStatement cstmt = con.prepareCall(<span class="string">"&#123;CALL demoSp(? , ?)&#125;"</span>);</span><br></pre></td></tr></table></figure><h3 id="5-执行SQL语句"><a href="#5-执行SQL语句" class="headerlink" title="5.执行SQL语句"></a>5.执行SQL语句</h3><p>Statement提供三种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.执行查询数据库的SQL语句，返回一个结果集（ResultSet）对象。</span></span><br><span class="line">ResultSet rs = stmt.executeQuery(<span class="string">"SELECT * FROM ..."</span>);</span><br><span class="line"><span class="comment">//2.用于执行INSERT、UPDATE或 DELETE语句以及SQL DDL语句</span></span><br><span class="line"><span class="keyword">int</span> rows = stmt.executeUpdate(<span class="string">"INSERT INTO ..."</span>);</span><br><span class="line"><span class="comment">//3.用于执行返回多个结果集、多个更新计数或二者组合的语句</span></span><br><span class="line"><span class="keyword">boolean</span> flag = stmt.execute(String sql);</span><br></pre></td></tr></table></figure><h3 id="6-处理结果"><a href="#6-处理结果" class="headerlink" title="6.处理结果"></a>6.处理结果</h3><p>两种情况:</p><ol><li>执行更新返回的是本次操作影响到的记录数。   </li><li>执行查询返回的结果是一个ResultSet对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    String name = rs.getString(<span class="string">"name"</span>) ;</span><br><span class="line">    String pass = rs.getString(<span class="number">1</span>) ; <span class="comment">// 此方法比较高效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-关闭JDBC对象"><a href="#7-关闭JDBC对象" class="headerlink" title="7.关闭JDBC对象"></a>7.关闭JDBC对象</h3><blockquote><p>关闭顺序和声明顺序相反</p></blockquote><ol><li>关闭resultSet结果集</li><li>关闭statement声明</li><li>关闭connection连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        resultSet.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        statement.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>附源程序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.successli.jdbcTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liyon on 2016.6.1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mysqlConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection;</span><br><span class="line">        Statement statement;</span><br><span class="line">        ResultSet resultSet;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载jdbc驱动程序</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"找不到驱动程序，加载驱动失败"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.提供JDBC连接的URL</span></span><br><span class="line">        <span class="comment">//String url = "jdbc:mysql://localhost:3306/warehouse";</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/warehouse?useUnicode=true&amp;characterEncoding=gbk"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"1234"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//3.建立连接</span></span><br><span class="line">            connection = DriverManager.getConnection(url,username,password);</span><br><span class="line">            <span class="comment">//4.创建一个statement声明</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//5.执行SQL语句，返回结果集resultSet</span></span><br><span class="line">            resultSet = statement.executeQuery(<span class="string">"select * from mylist;"</span>);</span><br><span class="line">            <span class="comment">//6.处理返回结果集resultSet的结果</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">                String name = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">                System.out.println(id);</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//7.关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                    System.out.println(<span class="string">"resultSet已关闭"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                    System.out.println(<span class="string">"statement已关闭"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                    System.out.println(<span class="string">"connection已关闭"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">            System.out.println(<span class="string">"数据库连接失败"</span>);</span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111</span></span><br><span class="line">liyongsheng</span><br><span class="line"><span class="number">222</span></span><br><span class="line">zhangsan</span><br><span class="line"><span class="number">333</span></span><br><span class="line">xiaoming</span><br><span class="line">resultSet已关闭</span><br><span class="line">statement已关闭</span><br><span class="line">connection已关闭</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/oracle_java.jpg&quot; alt=&quot;ethereum&quot; width=&quot;750px&quot; height=&quot;240px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://successli.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="http://successli.cn/2016/05/10/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://successli.cn/2016/05/10/Git学习笔记/</id>
    <published>2016-05-09T16:00:00.000Z</published>
    <updated>2018-07-21T15:08:01.265Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/git.png" alt="git" width="750px" height="240px"></p><a id="more"></a><h3 id="将某个文件夹设置为git仓库："><a href="#将某个文件夹设置为git仓库：" class="headerlink" title="将某个文件夹设置为git仓库："></a>将某个文件夹设置为git仓库：</h3><p>在这个文件夹下打开命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="添加文件到git本地仓库"><a href="#添加文件到git本地仓库" class="headerlink" title="添加文件到git本地仓库"></a>添加文件到git本地仓库</h3><p>第一步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add file1</span><br><span class="line">git add file2</span><br><span class="line">git add file3</span><br></pre></td></tr></table></figure><p>一般使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>第二步</p><p><em>git命令行commit不支持中文提示</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;add 3 files&quot;</span><br></pre></td></tr></table></figure><h3 id="时光穿梭"><a href="#时光穿梭" class="headerlink" title="时光穿梭"></a>时光穿梭</h3><p>查看仓库状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>查看文件修改了哪些内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff file1</span><br></pre></td></tr></table></figure><hr><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><hr><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>查看分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></p><p>创建分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch name</span><br></pre></td></tr></table></figure></p><p>切换分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout name</span><br></pre></td></tr></table></figure></p><p>创建并切换分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b name</span><br></pre></td></tr></table></figure></p><p>合并某分支到当前分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge name</span><br></pre></td></tr></table></figure></p><p>删除分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -d name</span><br></pre></td></tr></table></figure></p><hr><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>• 查看远程库信息，使⽤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></p><p>• 本地新建的分⽀如果不推送到远程，对其他⼈就是不可⻅的；<br>• 从本地推送分⽀，使⽤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin branch-name</span><br></pre></td></tr></table></figure></p><p>，如果推送失败，先⽤git pull抓取远程的新提交；<br>• 在本地创建和远程分⽀对应的分⽀,使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch-name origin/branchname</span><br></pre></td></tr></table></figure></p><p>，本地和远程分⽀的名称最好⼀致；<br>• 建⽴本地分⽀和远程分⽀的关联，使⽤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream branch-name origin/branch-name</span><br></pre></td></tr></table></figure></p><p>• 从远程抓取分⽀，使⽤git pull，如果有冲突，要先处理冲突。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/git.png&quot; alt=&quot;git&quot; width=&quot;750px&quot; height=&quot;240px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://successli.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>读《第一行代码》有感</title>
    <link href="http://successli.cn/2016/05/01/%E8%AF%BB%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://successli.cn/2016/05/01/读《第一行代码》有感/</id>
    <published>2016-04-30T16:00:00.000Z</published>
    <updated>2018-07-21T15:08:01.266Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/android.gif" alt="android" width="750px" height="300px"></p><a id="more"></a><h3 id="一个活动"><a href="#一个活动" class="headerlink" title="一个活动"></a>一个活动</h3><p>新建一个android工程，默认不创建活动，新建FirstActivity.java文件</p><h4 id="1-加载布局文件"><a href="#1-加载布局文件" class="headerlink" title="1.加载布局文件"></a>1.加载布局文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line"><span class="comment">//加载布局文件</span></span><br><span class="line">setContentView(R.layout.first_layout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-注册Activity"><a href="#2-注册Activity" class="headerlink" title="2.注册Activity"></a>2.注册Activity</h4><p>在AndroidManifest.xml文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</span></span><br><span class="line">    &lt;-&lt;!-- 注册活动 --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"This is first activity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义为主活动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-隐藏标题栏"><a href="#3-隐藏标题栏" class="headerlink" title="3.隐藏标题栏"></a>3.隐藏标题栏</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">//隐藏标题栏</span></span><br><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line"><span class="comment">//加载布局文件</span></span><br><span class="line">setContentView(R.layout.first_layout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-在活动中使用Toast"><a href="#4-在活动中使用Toast" class="headerlink" title="4.在活动中使用Toast"></a>4.在活动中使用Toast</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"Clicked Add"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"><span class="comment">//第一个参数是活动的上下文</span></span><br><span class="line"><span class="comment">//第二个参数是显示的文本</span></span><br><span class="line"><span class="comment">//第三个参数是 示的时间长短（Toast.LENGTH_SHORT or Toast.LENGTH_LONG）</span></span><br><span class="line">Toast android.widget.Toast.makeText(Context context, CharSequence text, <span class="keyword">int</span> duration);</span><br></pre></td></tr></table></figure><h4 id="5-在活动中使用Menu"><a href="#5-在活动中使用Menu" class="headerlink" title="5.在活动中使用Menu"></a>5.在活动中使用Menu</h4><ul><li>在res-&gt;menu下新建一个Menu Resource Type 的**.xml文件</li><li>编辑**.xml文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/add_item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Add"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/remove_item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Remove"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>重写FirstActivity.java中onCreateOptionsMenu()方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">getMenuInflater().inflate(R.menu.**, menu);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>为了使Menu中的item能够有功能，重写onOptionsItemSelected()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line"><span class="keyword">case</span> R.id.add_item:</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"Clicked Add"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> R.id.remove_item:</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"Clicked Remove"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-销毁一个活动"><a href="#6-销毁一个活动" class="headerlink" title="6.销毁一个活动"></a>6.销毁一个活动</h4><p>Activity类提供了一个方法,来销毁一个活动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//finish();</span><br><span class="line">@Override</span><br><span class="line">public void onClick(View v) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//Toast.makeText(FirstActivity.this, &quot;clicked&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">finish();//销毁活动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是创建一个活动涉及的知识</p><hr><h3 id="活动之间"><a href="#活动之间" class="headerlink" title="活动之间"></a>活动之间</h3><h4 id="1-使用显式Intent"><a href="#1-使用显式Intent" class="headerlink" title="1.使用显式Intent"></a>1.使用显式Intent</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onClick(View v) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//Toast.makeText(FirstActivity.this, &quot;clicked&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">//finish();//销毁活动</span><br><span class="line">//使用显式Intent在FirstActivity活动基础上打开SecondActivity活动</span><br><span class="line">Intent intent = new Intent(FirstActivity.this, SecondActivity.class);</span><br><span class="line">//调用startActivity()执行intent</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-使用隐式Intent"><a href="#2-使用隐式Intent" class="headerlink" title="2.使用隐式Intent"></a>2.使用隐式Intent</h4><p>需要实现从FirstActivity到达另外一个符合要求的活动中去<br>SecondActivity需要符合这个要求<br>首先在ActivityManifest.xml文件中定义<action>和<category>标签</category></action></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity </span><br><span class="line">    android:name=&quot;.SecondActivity&quot; &gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;!-- 定义一个标签来符合要求被FirstActivity活动启动 --&gt;</span><br><span class="line">        &lt;action android:name=&quot;***&quot;/&gt;</span><br><span class="line">        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><p>然后在FirstActivity中的onClick()方法中setAction这个标签，达到启动指定要求的应用的目的<br>有两种方法设置这个category<br>1.在构造方法中setAction这个category这个标签<br>2.直接调用Intent对象的intent.setAction()方法设置标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onClick(View v) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//Toast.makeText(FirstActivity.this, &quot;clicked&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">//finish();//销毁活动</span><br><span class="line">//Intent intent = new Intent(FirstActivity.this, SecondActivity.class);</span><br><span class="line">//startActivity(intent);</span><br><span class="line">//隐式Intent</span><br><span class="line">Intent intent=new Intent(&quot;***&quot;);//构造方法</span><br><span class="line">//Intent intent=new Intent();</span><br><span class="line">//intent.setAction(&quot;com.example.activity.ACTION_START&quot;)</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为startActivity启动时就是根据默认的category标签，所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</span><br></pre></td></tr></table></figure><p>可以调用默认的category来startActivity，当然我们也可以设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=new Intent();</span><br><span class="line">intent.setCategory(&quot;***&quot;);</span><br></pre></td></tr></table></figure><h4 id="3-更多隐式Intent用法"><a href="#3-更多隐式Intent用法" class="headerlink" title="3.更多隐式Intent用法"></a>3.更多隐式Intent用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=new Intent(Intent.ACTION_VIEW);</span><br><span class="line">intent.setData(Uri.parse(&quot;http://www.baidu.com&quot;));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><ul><li>指定Intent的action是Intent.ACTION_VIEW,是安卓系统内置动作，其常量为</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.intent.action.VIEW</span><br></pre></td></tr></table></figure><ul><li><code>Uri.parse(&quot;http://www.baidu.com&quot;)</code> 将网址解析成一个Uri对象</li><li>调用Intent的 <code>setData()</code> 方法将Uri对象传递进去</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/android.gif&quot; alt=&quot;android&quot; width=&quot;750px&quot; height=&quot;300px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java,Android" scheme="http://successli.cn/tags/Java-Android/"/>
    
  </entry>
  
</feed>
